# Executive Assistant AI - Prometheus Configuration
# Comprehensive monitoring and alerting setup

global:
  scrape_interval: 15s
  evaluation_interval: 15s
  external_labels:
    monitor: 'executive-ai-monitor'
    environment: 'development'

# Alertmanager configuration
alerting:
  alertmanagers:
    - static_configs:
        - targets:
          - alertmanager:9093

# Load rules once and periodically evaluate them
rule_files:
  - "alert_rules.yml"
  - "recording_rules.yml"

# Scrape configurations
scrape_configs:
  # Prometheus self-monitoring
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']
    scrape_interval: 5s
    metrics_path: /metrics

  # Executive Assistant AI application
  - job_name: 'executive-ai-app'
    static_configs:
      - targets: ['executive-assistant-ai:8080']
    scrape_interval: 10s
    metrics_path: /metrics
    scrape_timeout: 5s
    honor_labels: true
    params:
      format: ['prometheus']
    relabel_configs:
      - source_labels: [__address__]
        target_label: __param_target
      - source_labels: [__param_target]
        target_label: instance
      - target_label: __address__
        replacement: executive-assistant-ai:8080

  # Application health checks
  - job_name: 'executive-ai-health'
    static_configs:
      - targets: ['executive-assistant-ai:8080']
    scrape_interval: 30s
    metrics_path: /health
    scrape_timeout: 10s

  # Redis monitoring
  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']
    scrape_interval: 15s
    metrics_path: /metrics

  # PostgreSQL monitoring
  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres:5432']
    scrape_interval: 15s
    metrics_path: /metrics

  # Nginx monitoring
  - job_name: 'nginx'
    static_configs:
      - targets: ['nginx:80']
    scrape_interval: 15s
    metrics_path: /nginx_status

  # Node.js application metrics
  - job_name: 'nodejs-metrics'
    static_configs:
      - targets: ['executive-assistant-ai:8080']
    scrape_interval: 10s
    metrics_path: /metrics/nodejs
    honor_labels: true

  # Custom business metrics
  - job_name: 'business-metrics'
    static_configs:
      - targets: ['executive-assistant-ai:8080']
    scrape_interval: 30s
    metrics_path: /metrics/business
    params:
      module: [business]

  # API endpoint monitoring
  - job_name: 'api-endpoints'
    static_configs:
      - targets: ['executive-assistant-ai:8080']
    scrape_interval: 15s
    metrics_path: /metrics/api
    relabel_configs:
      - source_labels: [__address__]
        target_label: service
        replacement: 'executive-ai-api'

  # AI service monitoring
  - job_name: 'ai-service-metrics'
    static_configs:
      - targets: ['executive-assistant-ai:8080']
    scrape_interval: 20s
    metrics_path: /metrics/ai
    params:
      service: [ai]

  # Calendar service monitoring
  - job_name: 'calendar-service-metrics'
    static_configs:
      - targets: ['executive-assistant-ai:8080']
    scrape_interval: 20s
    metrics_path: /metrics/calendar
    params:
      service: [calendar]

  # Email service monitoring
  - job_name: 'email-service-metrics'
    static_configs:
      - targets: ['executive-assistant-ai:8080']
    scrape_interval: 20s
    metrics_path: /metrics/email
    params:
      service: [email]

  # Task service monitoring
  - job_name: 'task-service-metrics'
    static_configs:
      - targets: ['executive-assistant-ai:8080']
    scrape_interval: 20s
    metrics_path: /metrics/tasks
    params:
      service: [tasks]

  # Automation service monitoring
  - job_name: 'automation-service-metrics'
    static_configs:
      - targets: ['executive-assistant-ai:8080']
    scrape_interval: 30s
    metrics_path: /metrics/automation
    params:
      service: [automation]

# Remote write configuration for long-term storage
remote_write:
  - url: "http://localhost:9201/api/v1/write"
    queue_config:
      max_samples_per_send: 1000
      max_shards: 200
      capacity: 2500

# Storage configuration
storage:
  tsdb:
    retention.time: 30d
    retention.size: 10GB
    wal-compression: true

# Performance tuning
query:
  max_concurrency: 20
  timeout: 2m
  max_samples: 50000000

# Security configuration
web:
  enable_lifecycle: true
  enable_admin_api: true
  console.templates: /etc/prometheus/consoles
  console.libraries: /etc/prometheus/console_libraries
