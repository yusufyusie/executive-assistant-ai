# Executive Assistant AI - Docker Compose Configuration
# Comprehensive development and testing environment

version: '3.8'

services:
  # Main application service
  executive-assistant-ai:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: executive-ai-app
    restart: unless-stopped
    ports:
      - "3000:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - APP_NAME=Executive Assistant AI
      # AI Configuration
      - GEMINI_API_KEY=${GEMINI_API_KEY:-demo_key}
      - GEMINI_MODEL=gemini-2.0-flash-exp
      # Google Calendar API
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID:-demo_client_id}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET:-demo_secret}
      - GOOGLE_REDIRECT_URI=http://localhost:3000/auth/google/callback
      - GOOGLE_REFRESH_TOKEN=${GOOGLE_REFRESH_TOKEN:-demo_token}
      # SendGrid Configuration
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-demo_sendgrid_key}
      - SENDGRID_FROM_EMAIL=${SENDGRID_FROM_EMAIL:-assistant@example.com}
      - SENDGRID_FROM_NAME=Executive Assistant AI
      # GCP Configuration
      - GCP_PROJECT_ID=${GCP_PROJECT_ID:-executive-assistant-ai}
      - GCP_REGION=us-central1
      - GCP_SCHEDULER_TIMEZONE=America/New_York
      # Application Settings
      - DEFAULT_TIMEZONE=America/New_York
      - MAX_CALENDAR_DAYS_AHEAD=90
      - EMAIL_RATE_LIMIT_PER_HOUR=50
      - TASK_REMINDER_ADVANCE_HOURS=24
      # Security
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_change_in_production}
      - API_KEY=${API_KEY:-dev_api_key_change_in_production}
      # Logging
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    volumes:
      - ./logs:/app/logs
      - ./temp:/app/temp
    networks:
      - executive-ai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - redis
      - postgres
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.executive-ai.rule=Host(`localhost`)"
      - "traefik.http.services.executive-ai.loadbalancer.server.port=8080"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: executive-ai-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-dev_redis_password}
    volumes:
      - redis_data:/data
    networks:
      - executive-ai-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: executive-ai-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-executive_ai}
      - POSTGRES_USER=${POSTGRES_USER:-executive_ai_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev_postgres_password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - executive-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-executive_ai_user} -d ${POSTGRES_DB:-executive_ai}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for load balancing
  nginx:
    image: nginx:alpine
    container_name: executive-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - executive-ai-network
    depends_on:
      - executive-assistant-ai
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: executive-ai-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - executive-ai-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: executive-ai-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - executive-ai-network
    depends_on:
      - prometheus

  # Elasticsearch for logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: executive-ai-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - executive-ai-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: executive-ai-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - executive-ai-network
    depends_on:
      - elasticsearch
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  executive-ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
---
version: '3.8'

# Development-specific overrides
services:
  executive-assistant-ai:
    build:
      target: builder
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=debug
    command: ["npm", "run", "start:dev"]
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
